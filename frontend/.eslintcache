[{"C:\\FYP\\Ecommerse\\frontend\\src\\index.js":"1","C:\\FYP\\Ecommerse\\frontend\\src\\App.js":"2","C:\\FYP\\Ecommerse\\frontend\\src\\Routes.js":"3","C:\\FYP\\Ecommerse\\frontend\\src\\core\\Home.js":"4","C:\\FYP\\Ecommerse\\frontend\\src\\user\\Signin.js":"5","C:\\FYP\\Ecommerse\\frontend\\src\\user\\Signup.js":"6","C:\\FYP\\Ecommerse\\frontend\\src\\core\\Menu.js":"7","C:\\FYP\\Ecommerse\\frontend\\src\\config.js":"8","C:\\FYP\\Ecommerse\\frontend\\src\\assets\\css\\CssVariables.js":"9","C:\\FYP\\Ecommerse\\frontend\\src\\auth\\index.js":"10","C:\\FYP\\Ecommerse\\frontend\\src\\components\\ServeImage.js":"11","C:\\FYP\\Ecommerse\\frontend\\src\\core\\ProductsByCategory.js":"12","C:\\FYP\\Ecommerse\\frontend\\src\\core\\CategoryCard.js":"13","C:\\FYP\\Ecommerse\\frontend\\src\\core\\ProductCard.js":"14","C:\\FYP\\Ecommerse\\frontend\\src\\components\\ServeBackgroundImage.js":"15","C:\\FYP\\Ecommerse\\frontend\\src\\core\\Footer.js":"16","C:\\FYP\\Ecommerse\\frontend\\src\\core\\SuccessfulPayment.js":"17","C:\\FYP\\Ecommerse\\frontend\\src\\core\\Cart.js":"18","C:\\FYP\\Ecommerse\\frontend\\src\\core\\FailedPayment.js":"19","C:\\FYP\\Ecommerse\\frontend\\src\\context\\AppStateProvider.js":"20","C:\\FYP\\Ecommerse\\frontend\\src\\auth\\AdminRoute.js":"21","C:\\FYP\\Ecommerse\\frontend\\src\\admin\\Dashboard.js":"22","C:\\FYP\\Ecommerse\\frontend\\src\\core\\ForgotPassword.js":"23","C:\\FYP\\Ecommerse\\frontend\\src\\core\\ResetPassword.js":"24","C:\\FYP\\Ecommerse\\frontend\\src\\admin\\CategoryDetails.js":"25","C:\\FYP\\Ecommerse\\frontend\\src\\admin\\ProductDetails.js":"26","C:\\FYP\\Ecommerse\\frontend\\src\\admin\\ManageProducts.js":"27","C:\\FYP\\Ecommerse\\frontend\\src\\user\\ShopRegistration.js":"28","C:\\FYP\\Ecommerse\\frontend\\src\\admin\\charts\\BarChart.js":"29","C:\\FYP\\Ecommerse\\frontend\\src\\core\\SearchResult.js":"30"},{"size":199,"mtime":1618036485546,"results":"31","hashOfConfig":"32"},{"size":259,"mtime":1624456650544,"results":"33","hashOfConfig":"32"},{"size":2864,"mtime":1625243100950,"results":"34","hashOfConfig":"32"},{"size":2067,"mtime":1624026299703,"results":"35","hashOfConfig":"32"},{"size":9956,"mtime":1625071533006,"results":"36","hashOfConfig":"32"},{"size":9695,"mtime":1624989903188,"results":"37","hashOfConfig":"32"},{"size":6257,"mtime":1625245300336,"results":"38","hashOfConfig":"32"},{"size":116,"mtime":1624026759358,"results":"39","hashOfConfig":"32"},{"size":75,"mtime":1618057965524,"results":"40","hashOfConfig":"32"},{"size":226,"mtime":1618166767131,"results":"41","hashOfConfig":"32"},{"size":337,"mtime":1619881602473,"results":"42","hashOfConfig":"32"},{"size":4663,"mtime":1624898052692,"results":"43","hashOfConfig":"32"},{"size":1293,"mtime":1620199887147,"results":"44","hashOfConfig":"32"},{"size":7748,"mtime":1624898621998,"results":"45","hashOfConfig":"32"},{"size":329,"mtime":1619879703251,"results":"46","hashOfConfig":"32"},{"size":1752,"mtime":1620200103227,"results":"47","hashOfConfig":"32"},{"size":584,"mtime":1623687378196,"results":"48","hashOfConfig":"32"},{"size":3672,"mtime":1625247267404,"results":"49","hashOfConfig":"32"},{"size":479,"mtime":1623435733152,"results":"50","hashOfConfig":"32"},{"size":519,"mtime":1625243942172,"results":"51","hashOfConfig":"32"},{"size":567,"mtime":1624988847094,"results":"52","hashOfConfig":"32"},{"size":5352,"mtime":1625248994705,"results":"53","hashOfConfig":"32"},{"size":6118,"mtime":1625247267408,"results":"54","hashOfConfig":"32"},{"size":6668,"mtime":1625247267410,"results":"55","hashOfConfig":"32"},{"size":8422,"mtime":1625247267378,"results":"56","hashOfConfig":"32"},{"size":22199,"mtime":1625076040988,"results":"57","hashOfConfig":"32"},{"size":3966,"mtime":1625075451560,"results":"58","hashOfConfig":"32"},{"size":12004,"mtime":1625072650018,"results":"59","hashOfConfig":"32"},{"size":1790,"mtime":1625078585015,"results":"60","hashOfConfig":"32"},{"size":4636,"mtime":1625244404205,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1cng5o7",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\FYP\\Ecommerse\\frontend\\src\\index.js",[],["135","136"],"C:\\FYP\\Ecommerse\\frontend\\src\\App.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\Routes.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\core\\Home.js",["137","138","139"],"import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport banner1 from \"../assets/img/banner1.png\";\r\nimport banner2 from \"../assets/img/banner2.png\";\r\nimport banner3 from \"../assets/img/banner3.png\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../config\";\r\nimport { withRouter } from \"react-router\";\r\nimport CategoryCard from \"./CategoryCard\";\r\n\r\nconst Home = ({ history }) => {\r\n  const [categories, setCategories] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      console.log(API);\r\n      const response = await axios.get(`${API}/categories`);\r\n      setCategories(response.data);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      {categories && (\r\n        <Container fluid style={{ padding: 0 }}>\r\n          <Carousel\r\n            autoPlay={true}\r\n            infiniteLoop={true}\r\n            showThumbs={false}\r\n            transitionTime={3000}\r\n            stopOnHover={true}\r\n            interval={5500}\r\n          >\r\n            <div>\r\n              <img src={banner1} />\r\n            </div>\r\n            <div>\r\n              <img src={banner2} />\r\n            </div>\r\n            <div>\r\n              <img src={banner3} />\r\n            </div>\r\n          </Carousel>\r\n          <Container style={{ marginTop: 20 }}>\r\n            <Row>\r\n              <Col sm={12}>\r\n                <h1 className=\"home-category-heading\">Categories</h1>\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: 20 }}>\r\n              {categories.map((category, index) => (\r\n                <Col key={index} style={{ marginBottom: 30 }} sm={4}>\r\n                  <CategoryCard category={category} />\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          </Container>\r\n        </Container>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(Home);\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\user\\Signin.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\user\\Signup.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\core\\Menu.js",["140","141","142"],"C:\\FYP\\Ecommerse\\frontend\\src\\config.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\assets\\css\\CssVariables.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\auth\\index.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\components\\ServeImage.js",["143"],"import React from \"react\";\r\nimport { API } from \"../config\";\r\n\r\nconst ServeImage = ({ item, type, style }) => {\r\n  return (\r\n    <div className=\"product-image\">\r\n      <img\r\n        src={`${API}/${type}/photo/${item._id}`}\r\n        style={{\r\n          ...style,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ServeImage;\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\core\\ProductsByCategory.js",["144","145","146","147"],"import React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../config\";\r\nimport ProductCard from \"./ProductCard\";\r\nimport Slider from \"react-rangeslider\";\r\nimport \"react-rangeslider/lib/index.css\";\r\nimport Select from \"react-select\";\r\n\r\nconst ProductsByCategory = (props) => {\r\n  const category = props.location.state.category;\r\n  const [products, setProducts] = useState(null);\r\n  const [filteredProducts, setFilteredProducts] = useState(null);\r\n  const [pincodeFilteredProducts, setPincodeFilteredProducts] = useState(null);\r\n  const [volume, setVolume] = useState(0);\r\n  const [pincodeOptions, setPincodeOptions] = useState([]);\r\n  const [selectedPincode, setSelectedPinCode] = useState([\r\n    { value: 0, label: \"All\" },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await axios.get(\r\n        `${API}/products/category/${category._id}`\r\n      );\r\n      setProducts(response.data);\r\n      setFilteredProducts(response.data);\r\n      setPincodeFilteredProducts(response.data);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await axios.get(`${API}/shops`);\r\n      let temp = [];\r\n      response.data.map((shop) => {\r\n        temp.push(shop.pincode);\r\n      });\r\n      temp = Array.from(new Set(temp));\r\n      const secTemp = [{ value: 0, label: \"All\" }];\r\n      temp.map((pincode) => {\r\n        secTemp.push({ value: pincode, label: pincode });\r\n      });\r\n      setPincodeOptions([...secTemp]);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function filterProducts(product) {\r\n    return product.price <= this;\r\n  }\r\n\r\n  const handleOnChange = (value) => {\r\n    console.log(value);\r\n    setVolume(value);\r\n  };\r\n\r\n  function filterPincode(product) {\r\n    return product.shop.pincode === this.value;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (products !== null && products !== []) {\r\n      if (selectedPincode.value !== 0) {\r\n        const temp = products.filter(filterPincode, selectedPincode);\r\n        setPincodeFilteredProducts([...temp]);\r\n        setFilteredProducts([...temp]);\r\n        setVolume(0);\r\n      } else {\r\n        setPincodeFilteredProducts([...products]);\r\n        setFilteredProducts([...products]);\r\n        setVolume(0);\r\n      }\r\n    }\r\n  }, [selectedPincode]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {filteredProducts && (\r\n        <Container>\r\n          <Row>\r\n            <Col sm={12}>\r\n              <h1 className=\"product-by-category-heading\">{category.name}</h1>\r\n            </Col>\r\n            <Col md={{ span: 4, offset: 8 }}>\r\n              <h5 className=\"filter-heading\">Price</h5>\r\n            </Col>\r\n            <Col md={4}>\r\n              <Select\r\n                id=\"shop\"\r\n                className=\"category-select\"\r\n                name=\"shop\"\r\n                placeholder=\"Select Shop\"\r\n                value={selectedPincode}\r\n                onChange={(selected) => setSelectedPinCode(selected)}\r\n                options={pincodeOptions}\r\n              />\r\n            </Col>\r\n            <Col md={{ span: 4, offset: 4 }} style={{ marginBottom: 10 }}>\r\n              <Slider\r\n                style={{ background: \"white\" }}\r\n                value={volume}\r\n                min={0}\r\n                max={2000}\r\n                step={100}\r\n                orientation=\"horizontal\"\r\n                onChange={handleOnChange}\r\n                onChangeComplete={() => {\r\n                  const temp = pincodeFilteredProducts.filter(\r\n                    filterProducts,\r\n                    volume\r\n                  );\r\n                  setFilteredProducts(temp);\r\n                }}\r\n              />\r\n            </Col>\r\n            {filteredProducts.length > 0 ? (\r\n              <>\r\n                {filteredProducts.map((product, index) => (\r\n                  <Col key={index} sm={12} style={{ marginBottom: 30 }}>\r\n                    <ProductCard product={product} />\r\n                  </Col>\r\n                ))}\r\n              </>\r\n            ) : (\r\n              <Container>\r\n                <Row>\r\n                  <Col>\r\n                    <h3 style={{ textAlign: \"center\", color: \"white\" }}>\r\n                      Sorry, no items match your filter. <br /> Please try\r\n                      again.\r\n                    </h3>\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            )}\r\n          </Row>\r\n        </Container>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(ProductsByCategory);\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\core\\CategoryCard.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\core\\ProductCard.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\components\\ServeBackgroundImage.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\core\\Footer.js",["148"],"import React from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport COLORS from \"../assets/css/CssVariables\";\r\nimport NavbarLogo from \"../assets/img/Capture.PNG\";\r\nimport { FaFacebookF } from \"react-icons/fa\";\r\nimport { GrInstagram } from \"react-icons/gr\";\r\nimport { AiOutlineTwitter } from \"react-icons/ai\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ backgroundColor: COLORS.THEME_COLOR }}>\r\n        <Container style={{ paddingTop: 70, paddingBottom: 70 }}>\r\n          <Row>\r\n            <Col sm={3} style={{ textAlign: \"center\", alignSelf: \"center\" }}>\r\n              <img src={NavbarLogo} height={80} />\r\n            </Col>\r\n            <Col sm={3}>\r\n              <h3 className=\"footer-heading\">Contact us:</h3>\r\n              <h5 className=\"footer\">+91-9834693773</h5>\r\n              <h5 className=\"footer\">info@bookyourbooks.com</h5>\r\n              <h5 className=\"footer\">Company Address</h5>\r\n            </Col>\r\n            <Col sm={3}>\r\n              <h3 className=\"footer-heading\">Useful Links</h3>\r\n              <h5 className=\"footer\">Novels</h5>\r\n              <h5 className=\"footer\">Engineering</h5>\r\n              <h5 className=\"footer\">Exam Central</h5>\r\n            </Col>\r\n            <Col sm={3}>\r\n              <h3 className=\"footer-heading\">Social Media</h3>\r\n              <FaFacebookF fill=\"white\" size={30} />\r\n              <GrInstagram\r\n                fill=\"white\"\r\n                size={30}\r\n                style={{ marginLeft: 20, marginRight: 20 }}\r\n              />\r\n              <AiOutlineTwitter fill=\"white\" size={30} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\core\\SuccessfulPayment.js",["149"],"import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport paymentSuccess from \"../assets/img/paymentsuccess.png\";\r\n\r\nconst SuccessfulPayment = ({ history }) => {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col md={{ span: 8, offset: 3 }}>\r\n          <img\r\n            src={paymentSuccess}\r\n            width=\"75%\"\r\n            style={{ marginTop: 50, marginBottom: 50 }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withRouter(SuccessfulPayment);\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\core\\Cart.js",["150","151","152","153","154"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport ProductCard from \"./ProductCard\";\r\nimport Slider from \"react-rangeslider\";\r\nimport \"react-rangeslider/lib/index.css\";\r\nimport { AppStateContext } from \"../context/AppStateProvider\";\r\nimport { Button } from \"reactstrap\";\r\nimport COLORS from \"../assets/css/CssVariables\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport axios from \"axios\";\r\nimport { API, PK } from \"../config\";\r\n\r\nconst Cart = ({ history }) => {\r\n  const [products, setProducts] = useState(null);\r\n  const [filteredProducts, setFilteredProducts] = useState([]);\r\n  const [volume, setVolume] = useState(0);\r\n  const { cartChanged, setCartChanged } = useContext(AppStateContext);\r\n  const stripePromise = loadStripe(PK);\r\n\r\n  useEffect(() => {\r\n    console.log(\"cart updated in database\");\r\n    let cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n    setProducts(cart);\r\n    setFilteredProducts(cart);\r\n  }, [cartChanged]);\r\n\r\n  function filterProducts(product) {\r\n    return product.price <= this;\r\n  }\r\n\r\n  const handleOnChange = (value) => {\r\n    console.log(value);\r\n    setVolume(value);\r\n  };\r\n\r\n  const handleEmptyCart = () => {\r\n    let cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n    cart = [];\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    setCartChanged(true);\r\n  };\r\n\r\n  const handleBuyAll = async () => {\r\n    // Get Stripe.js instance\r\n    const stripe = await stripePromise;\r\n\r\n    const cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n\r\n    // Call your backend to create the Checkout Session\r\n    const response = await axios.post(`${API}/payment`, {\r\n      products: cart,\r\n    });\r\n    console.log(response);\r\n\r\n    const session = response.data;\r\n\r\n    // When the customer clicks on the button, redirect them to Checkout.\r\n    const result = await stripe.redirectToCheckout({\r\n      sessionId: session.id,\r\n    });\r\n\r\n    if (result.error) {\r\n      // If `redirectToCheckout` fails due to a browser or network\r\n      // error, display the localized error message to your customer\r\n      // using `result.error.message`.\r\n      history.push(\"/checkout/failed\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {filteredProducts.length > 0 ? (\r\n        <Container>\r\n          <Row>\r\n            <Col sm={12}>\r\n              <h2 className=\"cart-heading\">Here are your selected items</h2>\r\n            </Col>\r\n\r\n            {filteredProducts.map((product, index) => (\r\n              <Col key={index} sm={12} style={{ marginBottom: 30 }}>\r\n                <ProductCard product={product} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <Row>\r\n            <Col\r\n              md={{ span: 4, offset: 8 }}\r\n              style={{ marginBottom: 30, textAlign: \"end\" }}\r\n            >\r\n              <Button\r\n                style={{ background: COLORS.THEME_COLOR }}\r\n                onClick={handleEmptyCart}\r\n              >\r\n                Empty Cart\r\n              </Button>\r\n              <Button\r\n                style={{ background: COLORS.THEME_COLOR, marginLeft: 20 }}\r\n                onClick={handleBuyAll}\r\n              >\r\n                Buy All\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      ) : (\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <h3 style={{ textAlign: \"center\", color: \"white\" }}>\r\n                Sorry, there are no items in your cart\r\n              </h3>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(Cart);\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\core\\FailedPayment.js",["155"],"import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport paymentFailed from \"../assets/img/paymentfailed.png\";\r\n\r\nconst FailedPayment = ({ history }) => {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col md={{ span: 8, offset: 3 }}>\r\n          <img src={paymentFailed} width=\"75%\" />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withRouter(FailedPayment);\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\context\\AppStateProvider.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\auth\\AdminRoute.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\admin\\Dashboard.js",["156","157","158","159"],"C:\\FYP\\Ecommerse\\frontend\\src\\core\\ForgotPassword.js",["160","161"],"import React, { useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Label,\r\n  FormGroup,\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { Form, Formik, ErrorMessage } from \"formik\";\r\nimport { Mail } from \"react-feather\";\r\n\r\nimport \"../global.scss\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport COLORS from \"../assets/css/CssVariables\";\r\nimport { API } from \"../config\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst ForgotPassword = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"my-5\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col xl={10}>\r\n              <Card className=\"\">\r\n                <CardBody className=\"p-0\">\r\n                  <Row>\r\n                    <Col md={6} className=\"p-5 position-relative\">\r\n                      <div className=\"mx-auto mb-5\">\r\n                        <h3 className=\"d-inline align-middle ml-1 text-logo\">\r\n                          Forgot Password\r\n                        </h3>\r\n                      </div>\r\n\r\n                      <h6 className=\"h5 mb-0 mt-4\">Welcome back!</h6>\r\n                      <p className=\"text-muted mt-1 mb-4\">\r\n                        Enter your email address and follow the instructions to\r\n                        recover your account\r\n                      </p>\r\n                      <Formik\r\n                        initialValues={{\r\n                          email: \"\",\r\n                        }}\r\n                        validationSchema={Yup.object().shape({\r\n                          email: Yup.string()\r\n                            .required(\"Email is required\")\r\n                            .email(\"Enter a valid email\"),\r\n                        })}\r\n                        onSubmit={async (values, actions) => {\r\n                          try {\r\n                            const response = await axios.post(\r\n                              API + \"/forgot-password\",\r\n                              {\r\n                                email: values.email,\r\n                              }\r\n                            );\r\n                            console.log(response);\r\n                            if (response.data.systemMessageType === \"success\") {\r\n                              NotificationManager.success(\r\n                                response.data.systemMessage,\r\n                                \"Success\",\r\n                                3000\r\n                              );\r\n                            } else {\r\n                              NotificationManager.error(\r\n                                response.data.systemMessage,\r\n                                \"Error\",\r\n                                3000\r\n                              );\r\n                            }\r\n                          } catch (error) {\r\n                            NotificationManager.error(\r\n                              error.response.data.systemMessage,\r\n                              \"Error\",\r\n                              3000\r\n                            );\r\n                          }\r\n                        }}\r\n                        render={({ values, handleChange }) => (\r\n                          <Form>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"username\">Email ID</Label>\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">\r\n                                  <span className=\"input-group-text\">\r\n                                    <Mail className=\"icon-dual\" />\r\n                                  </span>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                  onChange={handleChange}\r\n                                  name=\"email\"\r\n                                  id=\"username\"\r\n                                  placeholder=\"hello@coderthemes.com\"\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"email\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup className=\"form-group mb-0 text-center\">\r\n                              <Button\r\n                                style={{\r\n                                  background: COLORS.THEME_COLOR,\r\n                                  width: \"100%\",\r\n                                }}\r\n                                // onClick={this.SuperAdminHandler}\r\n                              >\r\n                                Recover Account\r\n                              </Button>\r\n                            </FormGroup>\r\n                          </Form>\r\n                        )}\r\n                      />\r\n                      {/* <p className=\"mt-3\">\r\n                        <strong>Username:</strong> test &nbsp;&nbsp;{\" \"}\r\n                        <strong>Password:</strong> test\r\n                      </p> */}\r\n                    </Col>\r\n\r\n                    <Col md={6} className=\"d-none d-md-inline-block\">\r\n                      <div className=\"auth-page-sidebar\">\r\n                        <div className=\"overlay\"></div>\r\n                        <div className=\"auth-user-testimonial\">\r\n                          {/* <p className=\"lead\">\r\n                            \"It's a elegent templete. I love it very much!\"\r\n                          </p> */}\r\n                          {/* <p>- Admin User</p> */}\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\core\\ResetPassword.js",["162","163"],"import React, { useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Label,\r\n  FormGroup,\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { Form, Formik, ErrorMessage } from \"formik\";\r\nimport { Lock } from \"react-feather\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../global.scss\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport COLORS from \"../assets/css/CssVariables\";\r\nimport { API } from \"../config\";\r\nimport * as Yup from \"yup\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst Signin = () => {\r\n  const history = useHistory();\r\n  const { token } = useParams();\r\n  console.log(token);\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"my-5\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col xl={10}>\r\n              <Card className=\"\">\r\n                <CardBody className=\"p-0\">\r\n                  <Row>\r\n                    <Col md={6} className=\"p-5 position-relative\">\r\n                      <div className=\"mx-auto mb-5\">\r\n                        <h3 className=\"d-inline align-middle ml-1 text-logo\">\r\n                          Reset Password\r\n                        </h3>\r\n                      </div>\r\n\r\n                      <h6 className=\"h5 mb-0 mt-4\">Welcome back!</h6>\r\n                      <p className=\"text-muted mt-1 mb-4\">\r\n                        Please enter your new password and login with the same\r\n                        to book your favourite books\r\n                      </p>\r\n                      <Formik\r\n                        initialValues={{\r\n                          reset_password_link: token,\r\n                          password: \"\",\r\n                        }}\r\n                        validationSchema={Yup.object().shape({\r\n                          password: Yup.string()\r\n                            .required(\"Password is required\")\r\n                            .min(8, \"Minimum 8 characters\")\r\n                            .matches(\r\n                              /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                              \"Password Must contain one oppercase, one lowercase, one number and one special case character\"\r\n                            )\r\n                            .max(20, \"Maximum 20 characters\"),\r\n                        })}\r\n                        onSubmit={async (values, actions) => {\r\n                          try {\r\n                            const response = await axios.post(\r\n                              API + \"/reset-password\",\r\n                              values\r\n                            );\r\n                            console.log(response);\r\n                            if (response.data.systemMessageType === \"success\") {\r\n                              NotificationManager.success(\r\n                                response.data.systemMessage,\r\n                                \"Success\",\r\n                                3000\r\n                              );\r\n                              history.push(\"/signin\");\r\n                            } else {\r\n                              NotificationManager.error(\r\n                                response.data.systemMessage,\r\n                                \"Error\",\r\n                                3000\r\n                              );\r\n                            }\r\n                          } catch (error) {\r\n                            NotificationManager.error(\r\n                              error.response.data.systemMessage,\r\n                              \"Error\",\r\n                              3000\r\n                            );\r\n                          }\r\n                        }}\r\n                        render={({ values, handleChange }) => (\r\n                          <Form>\r\n                            <FormGroup className=\"mb-3\">\r\n                              <Label for=\"password\">Password</Label>\r\n\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">\r\n                                  <span className=\"input-group-text\">\r\n                                    <Lock className=\"icon-dual\" />\r\n                                  </span>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                  onChange={handleChange}\r\n                                  type=\"password\"\r\n                                  name=\"password\"\r\n                                  id=\"password\"\r\n                                  placeholder=\"Enter your new password\"\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"password\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"form-group mb-0 text-center\">\r\n                              <Button\r\n                                style={{\r\n                                  background: COLORS.THEME_COLOR,\r\n                                  width: \"100%\",\r\n                                }}\r\n                                // onClick={this.SuperAdminHandler}\r\n                              >\r\n                                Reset Password\r\n                              </Button>\r\n                            </FormGroup>\r\n                          </Form>\r\n                        )}\r\n                      />\r\n                      {/* <p className=\"mt-3\">\r\n                        <strong>Username:</strong> test &nbsp;&nbsp;{\" \"}\r\n                        <strong>Password:</strong> test\r\n                      </p> */}\r\n                    </Col>\r\n\r\n                    <Col md={6} className=\"d-none d-md-inline-block\">\r\n                      <div className=\"auth-page-sidebar\">\r\n                        <div className=\"overlay\"></div>\r\n                        <div className=\"auth-user-testimonial\">\r\n                          {/* <p className=\"lead\">\r\n                            \"It's a elegent templete. I love it very much!\"\r\n                          </p> */}\r\n                          {/* <p>- Admin User</p> */}\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\admin\\CategoryDetails.js",["164","165","166","167","168"],"import React, { useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Label,\r\n  FormGroup,\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { Form, Formik, ErrorMessage } from \"formik\";\r\nimport { ShoppingBag } from \"react-feather\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../global.scss\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport COLORS from \"../assets/css/CssVariables\";\r\nimport { API } from \"../config\";\r\nimport * as Yup from \"yup\";\r\nimport Image from \"../assets/img/image.svg\";\r\nimport { IoImageOutline } from \"react-icons/io5\";\r\n\r\nconst CreateCategory = ({ history }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"my-5\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col xl={10}>\r\n              <Card className=\"\">\r\n                <CardBody className=\"p-0\">\r\n                  <Row style={{ justifyContent: \"center\" }}>\r\n                    <Col md={6} className=\"p-5 position-relative\">\r\n                      <div className=\"mx-auto mb-5\">\r\n                        <h3 className=\"d-inline align-middle ml-1 text-logo\">\r\n                          Create Category\r\n                        </h3>\r\n                      </div>\r\n\r\n                      <h6 className=\"h5 mb-0 mt-4\">Hey There!</h6>\r\n                      <p className=\"text-muted mt-1 mb-4\">\r\n                        Create a category so that you could add books to it\r\n                        later.\r\n                      </p>\r\n                      <Formik\r\n                        initialValues={{\r\n                          name: \"\",\r\n                          image: \"\",\r\n                          photo: null,\r\n                        }}\r\n                        validationSchema={Yup.object().shape({\r\n                          name: Yup.string().required(\r\n                            \"Category name is required\"\r\n                          ),\r\n                          image: Yup.string().required(\"Image is required\"),\r\n                        })}\r\n                        onSubmit={async (values, actions) => {\r\n                          const user = JSON.parse(localStorage.getItem(\"user\"));\r\n                          const token = localStorage.getItem(\"token\");\r\n                          let formData = new FormData();\r\n                          formData.append(\"name\", values.name);\r\n                          formData.append(\"photo\", values.photo);\r\n                          try {\r\n                            const response = await axios.post(\r\n                              API + `/category/create/${user._id}`,\r\n                              formData,\r\n                              {\r\n                                headers: {\r\n                                  Authorization: token,\r\n                                },\r\n                              }\r\n                            );\r\n                            if (response.data.systemMessageType === \"success\") {\r\n                              history.push(\"/admin/create/product\");\r\n                              NotificationManager.success(\r\n                                \"Successfully created category. Now you can add Products to it.\",\r\n                                \"Success\",\r\n                                3000\r\n                              );\r\n                            } else {\r\n                              NotificationManager.error(\r\n                                response.data.systemMessage,\r\n                                \"Error\",\r\n                                3000\r\n                              );\r\n                            }\r\n                          } catch (error) {\r\n                            NotificationManager.error(\r\n                              error.response.data.systemMessage,\r\n                              \"Error\",\r\n                              3000\r\n                            );\r\n                          }\r\n                        }}\r\n                        render={({ values, handleChange, setFieldValue }) => (\r\n                          <Form style={{ width: \"100%\" }}>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"image\">Category Image</Label>\r\n                              <InputGroup>\r\n                                <Label for=\"image\" style={{ width: \"100%\" }}>\r\n                                  {values.image === \"\" ? (\r\n                                    <IoImageOutline\r\n                                      size={50}\r\n                                      style={{ cursor: \"pointer\" }}\r\n                                    />\r\n                                  ) : (\r\n                                    <img src={values.image} width=\"100%\" />\r\n                                  )}\r\n                                </Label>\r\n                                <Input\r\n                                  type=\"file\"\r\n                                  onChange={(event) => {\r\n                                    if (event.target.files.length > 0) {\r\n                                      setFieldValue(\r\n                                        \"image\",\r\n                                        URL.createObjectURL(\r\n                                          event.target.files[0]\r\n                                        )\r\n                                      );\r\n                                      setFieldValue(\r\n                                        \"photo\",\r\n                                        event.target.files[0]\r\n                                      );\r\n                                    }\r\n                                  }}\r\n                                  accept=\"image/*\"\r\n                                  name=\"image\"\r\n                                  id=\"image\"\r\n                                  style={{ display: \"none\" }}\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"image\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"username\">Category Name</Label>\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">\r\n                                  <span className=\"input-group-text\">\r\n                                    <ShoppingBag className=\"icon-dual\" />\r\n                                  </span>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                  onChange={handleChange}\r\n                                  name=\"name\"\r\n                                  id=\"username\"\r\n                                  placeholder=\"Category Name\"\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"name\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"form-group mb-0 text-center\">\r\n                              <Button\r\n                                style={{\r\n                                  background: COLORS.THEME_COLOR,\r\n                                  width: \"100%\",\r\n                                }}\r\n                                // onClick={this.SuperAdminHandler}\r\n                              >\r\n                                Create Category\r\n                              </Button>\r\n                            </FormGroup>\r\n                          </Form>\r\n                        )}\r\n                      />\r\n                      {/* <p className=\"mt-3\">\r\n                        <strong>Username:</strong> test &nbsp;&nbsp;{\" \"}\r\n                        <strong>Password:</strong> test\r\n                      </p> */}\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(CreateCategory);\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\admin\\ProductDetails.js",["169","170","171","172","173","174"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Label,\r\n  FormGroup,\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { Form, Formik, ErrorMessage } from \"formik\";\r\nimport { Book, Tag, User } from \"react-feather\";\r\nimport \"../global.scss\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport COLORS from \"../assets/css/CssVariables\";\r\nimport { API } from \"../config\";\r\nimport * as Yup from \"yup\";\r\nimport { IoImageOutline } from \"react-icons/io5\";\r\nimport Select from \"react-select\";\r\n\r\nconst ProductDetails = ({ history, location }) => {\r\n  const [categoryOptions, setCategoryOptions] = useState([]);\r\n  const [shopOptions, setShopOptions] = useState([]);\r\n  const [productImage, setProductImage] = useState(\"\");\r\n  const [productBinaryPhoto, setProductBinaryPhoto] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    function dataURLtoFile(dataurl, filename) {\r\n      var arr = dataurl.split(\",\"),\r\n        mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]),\r\n        n = bstr.length,\r\n        u8arr = new Uint8Array(n);\r\n\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n\r\n      return new File([u8arr], filename, { type: mime });\r\n    }\r\n\r\n    function getBase64(url) {\r\n      return axios\r\n        .get(url, {\r\n          responseType: \"arraybuffer\",\r\n        })\r\n        .then((response) => {\r\n          setProductImage(\r\n            `data:image/jpeg;base64,${Buffer.from(\r\n              response.data,\r\n              \"binary\"\r\n            ).toString(\"base64\")}`\r\n          );\r\n          setProductBinaryPhoto(\r\n            dataURLtoFile(\r\n              `data:image/jpeg;base64,${Buffer.from(\r\n                response.data,\r\n                \"binary\"\r\n              ).toString(\"base64\")}`,\r\n              \"hello.png\"\r\n            )\r\n          );\r\n        });\r\n    }\r\n    if (location.state) {\r\n      getBase64(`${API}/product/photo/${location.state.data._id}`);\r\n    }\r\n  }, []);\r\n\r\n  console.log(productBinaryPhoto);\r\n\r\n  useEffect(async () => {\r\n    const response = await axios.get(`${API}/categories`);\r\n    const temp = [];\r\n    if (response.data) {\r\n      response.data.map((category) => {\r\n        temp.push({ _id: category._id, name: category.name });\r\n      });\r\n    }\r\n    setCategoryOptions([...temp]);\r\n  }, []);\r\n\r\n  useEffect(async () => {\r\n    const response = await axios.get(`${API}/shops`);\r\n    const temp = [];\r\n    if (response.data) {\r\n      response.data.map((shop) => {\r\n        temp.push({ _id: shop._id, name: shop.name });\r\n      });\r\n    }\r\n    setShopOptions([...temp]);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"my-5\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col xl={10}>\r\n              <Card className=\"\">\r\n                <CardBody className=\"p-0\">\r\n                  <Row style={{ justifyContent: \"center\" }}>\r\n                    <Col md={6} className=\"p-5 position-relative\">\r\n                      <div className=\"mx-auto mb-5\">\r\n                        <h3 className=\"d-inline align-middle ml-1 text-logo\">\r\n                          {location.state ? \"Update Product\" : \"Create Product\"}\r\n                        </h3>\r\n                      </div>\r\n\r\n                      <h6 className=\"h5 mb-0 mt-4\">Hey There!</h6>\r\n                      <p className=\"text-muted mt-1 mb-4\">\r\n                        {location.state\r\n                          ? \"Please update the selected product.\"\r\n                          : \"Create a product so that your customers can buy that.\"}\r\n                      </p>\r\n                      <Formik\r\n                        initialValues={{\r\n                          name: location.state ? location.state.data.name : \"\",\r\n                          description: location.state\r\n                            ? location.state.data.description\r\n                            : \"\",\r\n                          price: location.state\r\n                            ? location.state.data.price\r\n                            : \"\",\r\n                          category: location.state\r\n                            ? location.state.data.category\r\n                            : \"\",\r\n                          shop: location.state\r\n                            ? location.state.data.shop\r\n                            : localStorage.getItem(\"shop\")\r\n                            ? JSON.parse(localStorage.getItem(\"shop\"))\r\n                            : \"\",\r\n                          shipping: true,\r\n                          quantity: location.state\r\n                            ? location.state.data.quantity\r\n                            : \"\",\r\n                          author: location.state\r\n                            ? location.state.data.author\r\n                            : \"\",\r\n                          sold: location.state ? location.state.data.sold : 0,\r\n                        }}\r\n                        validationSchema={Yup.object().shape({\r\n                          name: Yup.string().required(\r\n                            \"Category name is required\"\r\n                          ),\r\n                          description: Yup.string().required(\r\n                            \"Product description is required\"\r\n                          ),\r\n\r\n                          price: Yup.number()\r\n                            .typeError(\"Product price must be a number\")\r\n                            .required(\"Product price is required\"),\r\n                          category: Yup.object()\r\n                            .typeError(\"Please select a category\")\r\n                            .required(\"Please select a category\"),\r\n                          shop: Yup.object()\r\n                            .typeError(\"Please select a shop\")\r\n                            .required(\"Please select a shop\"),\r\n                          quantity: Yup.number()\r\n                            .typeError(\"Product price must be a number\")\r\n                            .required(\"Product quantity is required\"),\r\n                          author: Yup.string().required(\"Author is required\"),\r\n                        })}\r\n                        onSubmit={async (values, actions) => {\r\n                          console.log(\"Gurjeet\");\r\n                          const user = JSON.parse(localStorage.getItem(\"user\"));\r\n                          const token = localStorage.getItem(\"token\");\r\n                          let formData = new FormData();\r\n                          formData.append(\"name\", values.name);\r\n                          formData.append(\"photo\", productBinaryPhoto);\r\n                          formData.append(\"description\", values.description);\r\n                          formData.append(\"price\", values.price);\r\n                          formData.append(\"category\", values.category._id);\r\n                          formData.append(\"shop\", values.shop._id);\r\n                          formData.append(\"shipping\", values.shipping);\r\n                          formData.append(\"quantity\", values.quantity);\r\n                          formData.append(\"author\", values.author);\r\n                          formData.append(\"sold\", values.sold);\r\n\r\n                          if (location.state) {\r\n                            console.log(\"Gurjeet\");\r\n                            try {\r\n                              const response = await axios.put(\r\n                                API +\r\n                                  `/product/${location.state.data._id}/${user._id}`,\r\n                                formData,\r\n                                {\r\n                                  headers: {\r\n                                    Authorization: token,\r\n                                  },\r\n                                }\r\n                              );\r\n                              console.log(response);\r\n                              if (\r\n                                response.data.systemMessageType === \"success\"\r\n                              ) {\r\n                                NotificationManager.success(\r\n                                  \"Successfully updated product.\",\r\n                                  \"Success\",\r\n                                  3000\r\n                                );\r\n                              } else {\r\n                                NotificationManager.error(\r\n                                  response.data.systemMessage,\r\n                                  \"Error\",\r\n                                  3000\r\n                                );\r\n                              }\r\n                            } catch (error) {\r\n                              NotificationManager.error(\r\n                                error.response.data.systemMessage,\r\n                                \"Error\",\r\n                                3000\r\n                              );\r\n                            }\r\n                          } else {\r\n                            try {\r\n                              const response = await axios.post(\r\n                                API + `/product/create/${user._id}`,\r\n                                formData,\r\n                                {\r\n                                  headers: {\r\n                                    Authorization: token,\r\n                                  },\r\n                                }\r\n                              );\r\n                              console.log(response);\r\n                              if (\r\n                                response.data.systemMessageType === \"success\"\r\n                              ) {\r\n                                NotificationManager.success(\r\n                                  \"Successfully created product.\",\r\n                                  \"Success\",\r\n                                  3000\r\n                                );\r\n                              } else {\r\n                                NotificationManager.error(\r\n                                  response.data.systemMessage,\r\n                                  \"Error\",\r\n                                  3000\r\n                                );\r\n                              }\r\n                            } catch (error) {\r\n                              NotificationManager.error(\r\n                                error.response.data.systemMessage,\r\n                                \"Error\",\r\n                                3000\r\n                              );\r\n                            }\r\n                          }\r\n                        }}\r\n                        render={({ values, handleChange, setFieldValue }) => (\r\n                          <Form style={{ width: \"100%\" }}>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"image\">Product Image</Label>\r\n                              <InputGroup>\r\n                                <Label for=\"image\" style={{ width: \"100%\" }}>\r\n                                  {productImage === \"\" ? (\r\n                                    <IoImageOutline\r\n                                      size={50}\r\n                                      style={{ cursor: \"pointer\" }}\r\n                                    />\r\n                                  ) : (\r\n                                    <img src={productImage} width=\"100%\" />\r\n                                  )}\r\n                                </Label>\r\n                                <Input\r\n                                  type=\"file\"\r\n                                  onChange={(event) => {\r\n                                    console.log(event.target.files);\r\n                                    if (event.target.files.length > 0) {\r\n                                      setProductImage(\r\n                                        URL.createObjectURL(\r\n                                          event.target.files[0]\r\n                                        )\r\n                                      );\r\n                                      setProductBinaryPhoto(\r\n                                        event.target.files[0]\r\n                                      );\r\n                                    }\r\n                                  }}\r\n                                  accept=\"image/*\"\r\n                                  name=\"image\"\r\n                                  id=\"image\"\r\n                                  style={{ display: \"none\" }}\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"image\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"name\">Product Name</Label>\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">\r\n                                  <span className=\"input-group-text\">\r\n                                    <Book className=\"icon-dual\" />\r\n                                  </span>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                  value={values.name}\r\n                                  onChange={handleChange}\r\n                                  name=\"name\"\r\n                                  id=\"name\"\r\n                                  placeholder=\"Product Name\"\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"name\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"author\">Product Author</Label>\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">\r\n                                  <span className=\"input-group-text\">\r\n                                    <User className=\"icon-dual\" />\r\n                                  </span>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                  value={values.author}\r\n                                  onChange={handleChange}\r\n                                  name=\"author\"\r\n                                  id=\"author\"\r\n                                  placeholder=\"Author\"\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"author\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"description\">\r\n                                Product Description\r\n                              </Label>\r\n                              <InputGroup>\r\n                                <Input\r\n                                  value={values.description}\r\n                                  type=\"textarea\"\r\n                                  onChange={handleChange}\r\n                                  name=\"description\"\r\n                                  id=\"description\"\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"description\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"shop\">Select Shop</Label>\r\n                              <InputGroup>\r\n                                <Select\r\n                                  id=\"shop\"\r\n                                  className=\"category-select\"\r\n                                  name=\"shop\"\r\n                                  placeholder=\"Select Shop\"\r\n                                  value={values.shop}\r\n                                  getOptionLabel={(option) => option.name}\r\n                                  getOptionValue={(option) => option._id}\r\n                                  onChange={(shop) =>\r\n                                    setFieldValue(\"shop\", shop)\r\n                                  }\r\n                                  options={shopOptions}\r\n                                  isDisabled={\r\n                                    JSON.parse(localStorage.getItem(\"user\"))\r\n                                      .role === 1\r\n                                  }\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"shop\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"price\">Product Price</Label>\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">\r\n                                  <span className=\"input-group-text\">\r\n                                    <Tag className=\"icon-dual\" />\r\n                                  </span>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                  value={values.price}\r\n                                  onChange={handleChange}\r\n                                  name=\"price\"\r\n                                  id=\"price\"\r\n                                  placeholder=\"Product Price\"\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"price\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"select\">Select Category</Label>\r\n                              <InputGroup>\r\n                                <Select\r\n                                  id=\"category\"\r\n                                  className=\"category-select\"\r\n                                  name=\"category\"\r\n                                  placeholder=\"Select Category\"\r\n                                  value={values.category}\r\n                                  getOptionLabel={(option) => option.name}\r\n                                  getOptionValue={(option) => option._id}\r\n                                  onChange={(category) =>\r\n                                    setFieldValue(\"category\", category)\r\n                                  }\r\n                                  options={categoryOptions}\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"category\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"\">\r\n                              <Label for=\"quality\">Product Quantity</Label>\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">\r\n                                  <span className=\"input-group-text\">\r\n                                    <Tag className=\"icon-dual\" />\r\n                                  </span>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                  value={values.quantity}\r\n                                  onChange={handleChange}\r\n                                  name=\"quantity\"\r\n                                  id=\"quality\"\r\n                                  placeholder=\"Product Quantity\"\r\n                                />\r\n                              </InputGroup>\r\n                              <ErrorMessage\r\n                                name={\"quantity\"}\r\n                                className=\"error\"\r\n                                component=\"div\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"form-group mb-0 text-center\">\r\n                              <Button\r\n                                style={{\r\n                                  background: COLORS.THEME_COLOR,\r\n                                  width: \"100%\",\r\n                                }}\r\n                                type=\"submit\"\r\n                              >\r\n                                {location.state\r\n                                  ? \"Update Product\"\r\n                                  : \"Create Product\"}\r\n                              </Button>\r\n                            </FormGroup>\r\n                          </Form>\r\n                        )}\r\n                      />\r\n                      {/* <p className=\"mt-3\">\r\n                        <strong>Username:</strong> test &nbsp;&nbsp;{\" \"}\r\n                        <strong>Password:</strong> test\r\n                      </p> */}\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(ProductDetails);\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\admin\\ManageProducts.js",["175"],"import React, { useEffect, useState } from \"react\";\r\nimport { API } from \"../config\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nconst ManageProducts = ({ history, location }) => {\r\n  const [products, setProducts] = useState([]);\r\n  const [updated, setUpdated] = useState(false);\r\n  const { SearchBar } = Search;\r\n\r\n  const actionsFormatter = (cell, row) => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-evenly\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <FaEdit\r\n          size={20}\r\n          fill=\"white\"\r\n          onClick={() => {\r\n            history.push(`/update/product/${row._id}`, { data: row });\r\n          }}\r\n          style={{ cursor: \"pointer\" }}\r\n        />\r\n        <MdDelete\r\n          size={20}\r\n          fill=\"white\"\r\n          onClick={(e) => deleteProduct(e, row)}\r\n          style={{ cursor: \"pointer\" }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const deleteProduct = async (e, row) => {\r\n    e.preventDefault();\r\n    const token = localStorage.getItem(\"token\");\r\n    console.log(token);\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    const response = await axios.delete(\r\n      `${API}/product/${row._id}/${user._id}`,\r\n      {\r\n        headers: {\r\n          Authorization: token,\r\n        },\r\n      }\r\n    );\r\n    if (response.data.systemMessageType === \"success\") {\r\n      setUpdated(true);\r\n      NotificationManager.success(\r\n        `${row.name} is successfully deleted`,\r\n        \"Success\",\r\n        3000\r\n      );\r\n    }\r\n  };\r\n  const columns = [\r\n    {\r\n      dataField: \"_id\",\r\n      text: \"Product ID\",\r\n      style: function callback(cell) {\r\n        return { color: \"white\" };\r\n      },\r\n      sort: true,\r\n    },\r\n\r\n    {\r\n      dataField: \"name\",\r\n      text: \"Product Name\",\r\n      style: function callback(cell) {\r\n        return { color: \"white\" };\r\n      },\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"price\",\r\n      text: \"Product Price\",\r\n      style: function callback(cell) {\r\n        return { color: \"white\" };\r\n      },\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"actions\",\r\n      text: \"Actions\",\r\n      formatter: actionsFormatter,\r\n    },\r\n  ];\r\n\r\n  useEffect(async () => {\r\n    if (JSON.parse(localStorage.getItem(\"user\")).role === 1) {\r\n      const response = await axios.get(\r\n        `${API}/products/shop/${JSON.parse(localStorage.getItem(\"shop\"))._id}`\r\n      );\r\n      setUpdated(false);\r\n      setProducts(response.data);\r\n    } else {\r\n      const response = await axios.get(`${API}/products?limit=undefined`);\r\n      setUpdated(false);\r\n      setProducts(response.data);\r\n    }\r\n  }, [updated]);\r\n\r\n  const afterSearch = (newResult) => {\r\n    console.log(newResult);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col sm={12}>\r\n          <h1 className=\"product-by-category-heading\">Manage Products</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={12}>\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={products}\r\n            columns={columns}\r\n            search={{ afterSearch }}\r\n          >\r\n            {(props) => {\r\n              return (\r\n                <div>\r\n                  <SearchBar\r\n                    {...props.searchProps}\r\n                    style={{ marginBottom: 20 }}\r\n                  />\r\n                  <BootstrapTable {...props.baseProps} />\r\n                </div>\r\n              );\r\n            }}\r\n          </ToolkitProvider>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withRouter(ManageProducts);\r\n","C:\\FYP\\Ecommerse\\frontend\\src\\user\\ShopRegistration.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\admin\\charts\\BarChart.js",[],"C:\\FYP\\Ecommerse\\frontend\\src\\core\\SearchResult.js",["176","177","178"],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":37,"column":15,"nodeType":"185","endLine":37,"endColumn":36},{"ruleId":"183","severity":1,"message":"184","line":40,"column":15,"nodeType":"185","endLine":40,"endColumn":36},{"ruleId":"183","severity":1,"message":"184","line":43,"column":15,"nodeType":"185","endLine":43,"endColumn":36},{"ruleId":"186","severity":1,"message":"187","line":77,"column":6,"nodeType":"188","endLine":77,"endColumn":23,"suggestions":"189"},{"ruleId":"186","severity":1,"message":"190","line":77,"column":7,"nodeType":"188","endLine":77,"endColumn":9},{"ruleId":"183","severity":1,"message":"184","line":87,"column":9,"nodeType":"185","endLine":87,"endColumn":47},{"ruleId":"183","severity":1,"message":"184","line":7,"column":7,"nodeType":"185","endLine":12,"endColumn":9},{"ruleId":"186","severity":1,"message":"191","line":32,"column":6,"nodeType":"188","endLine":32,"endColumn":8,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":38,"column":32,"nodeType":"195","messageId":"196","endLine":38,"endColumn":34},{"ruleId":"193","severity":1,"message":"194","line":43,"column":26,"nodeType":"195","messageId":"196","endLine":43,"endColumn":28},{"ruleId":"186","severity":1,"message":"197","line":77,"column":6,"nodeType":"188","endLine":77,"endColumn":23,"suggestions":"198"},{"ruleId":"183","severity":1,"message":"184","line":16,"column":15,"nodeType":"185","endLine":16,"endColumn":51},{"ruleId":"183","severity":1,"message":"184","line":11,"column":11,"nodeType":"185","endLine":15,"endColumn":13},{"ruleId":"199","severity":1,"message":"200","line":5,"column":8,"nodeType":"201","messageId":"202","endLine":5,"endColumn":14},{"ruleId":"199","severity":1,"message":"203","line":15,"column":10,"nodeType":"201","messageId":"202","endLine":15,"endColumn":18},{"ruleId":"199","severity":1,"message":"204","line":17,"column":10,"nodeType":"201","messageId":"202","endLine":17,"endColumn":16},{"ruleId":"199","severity":1,"message":"205","line":28,"column":12,"nodeType":"201","messageId":"202","endLine":28,"endColumn":26},{"ruleId":"199","severity":1,"message":"206","line":32,"column":9,"nodeType":"201","messageId":"202","endLine":32,"endColumn":23},{"ruleId":"183","severity":1,"message":"184","line":11,"column":11,"nodeType":"185","endLine":11,"endColumn":50},{"ruleId":"199","severity":1,"message":"207","line":4,"column":29,"nodeType":"201","messageId":"202","endLine":4,"endColumn":45},{"ruleId":"186","severity":1,"message":"208","line":15,"column":13,"nodeType":"195","endLine":39,"endColumn":4},{"ruleId":"193","severity":1,"message":"194","line":23,"column":35,"nodeType":"195","messageId":"196","endLine":23,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":30,"column":35,"nodeType":"195","messageId":"196","endLine":30,"endColumn":37},{"ruleId":"199","severity":1,"message":"209","line":1,"column":17,"nodeType":"201","messageId":"202","endLine":1,"endColumn":27},{"ruleId":"199","severity":1,"message":"210","line":27,"column":9,"nodeType":"201","messageId":"202","endLine":27,"endColumn":16},{"ruleId":"199","severity":1,"message":"209","line":1,"column":17,"nodeType":"201","messageId":"202","endLine":1,"endColumn":27},{"ruleId":"199","severity":1,"message":"211","line":19,"column":10,"nodeType":"201","messageId":"202","endLine":19,"endColumn":14},{"ruleId":"199","severity":1,"message":"212","line":1,"column":17,"nodeType":"201","messageId":"202","endLine":1,"endColumn":26},{"ruleId":"199","severity":1,"message":"213","line":1,"column":28,"nodeType":"201","messageId":"202","endLine":1,"endColumn":34},{"ruleId":"199","severity":1,"message":"211","line":19,"column":10,"nodeType":"201","messageId":"202","endLine":19,"endColumn":14},{"ruleId":"199","severity":1,"message":"214","line":25,"column":8,"nodeType":"201","messageId":"202","endLine":25,"endColumn":13},{"ruleId":"183","severity":1,"message":"184","line":112,"column":37,"nodeType":"185","endLine":112,"endColumn":76},{"ruleId":"186","severity":1,"message":"215","line":74,"column":6,"nodeType":"188","endLine":74,"endColumn":8,"suggestions":"216"},{"ruleId":"186","severity":1,"message":"208","line":78,"column":13,"nodeType":"195","endLine":87,"endColumn":4},{"ruleId":"193","severity":1,"message":"194","line":82,"column":36,"nodeType":"195","messageId":"196","endLine":82,"endColumn":38},{"ruleId":"186","severity":1,"message":"208","line":89,"column":13,"nodeType":"195","endLine":98,"endColumn":4},{"ruleId":"193","severity":1,"message":"194","line":93,"column":32,"nodeType":"195","messageId":"196","endLine":93,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":270,"column":37,"nodeType":"185","endLine":270,"endColumn":76},{"ruleId":"186","severity":1,"message":"208","line":99,"column":13,"nodeType":"195","endLine":111,"endColumn":4},{"ruleId":"193","severity":1,"message":"194","line":35,"column":32,"nodeType":"195","messageId":"196","endLine":35,"endColumn":34},{"ruleId":"193","severity":1,"message":"194","line":40,"column":26,"nodeType":"195","messageId":"196","endLine":40,"endColumn":28},{"ruleId":"186","severity":1,"message":"197","line":74,"column":6,"nodeType":"188","endLine":74,"endColumn":23,"suggestions":"217"},"no-native-reassign",["218"],"no-negated-in-lhs",["219"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCartChanged'. Either include it or remove the dependency array.","ArrayExpression",["220"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","React Hook useEffect has a missing dependency: 'category._id'. Either include it or remove the dependency array.",["221"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPincodeFilteredProducts' needs the current value of 'products'.",["222"],"no-unused-vars","'Slider' is defined but never used.","Identifier","unusedVar","'products' is assigned a value but never used.","'volume' is assigned a value but never used.","'filterProducts' is defined but never used.","'handleOnChange' is assigned a value but never used.","'FaTemperatureLow' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","'useContext' is defined but never used.","'history' is assigned a value but never used.","'Link' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Image' is defined but never used.","React Hook useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.",["223"],["224"],"no-global-assign","no-unsafe-negation",{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"229","fix":"233"},"Update the dependencies array to be: [cartChanged, setCartChanged]",{"range":"234","text":"235"},"Update the dependencies array to be: [category._id]",{"range":"236","text":"237"},"Update the dependencies array to be: [products, selectedPincode]",{"range":"238","text":"239"},"Update the dependencies array to be: [location.state]",{"range":"240","text":"241"},{"range":"242","text":"239"},[2558,2575],"[cartChanged, setCartChanged]",[1193,1195],"[category._id]",[2410,2427],"[products, selectedPincode]",[2105,2107],"[location.state]",[2398,2415]]